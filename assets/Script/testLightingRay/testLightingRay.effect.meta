{
  "ver": "1.0.25",
  "uuid": "78909bfd-2baf-443d-b0c1-52ad6baac6c8",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nuniform float u_time;\nuniform float u_distance;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos.y += u_distance * 10.0 * u_time;\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D sampler1;\nuniform sampler2D sampler2;\n#endif\nuniform float u_time;\nuniform float u_cutTime;\nuniform float u_distance;\nuniform float u_offset;\nvoid main () {\n  vec2 uvOffset = vec2(v_uv0.x + u_offset, v_uv0.y);\n  lowp vec4 dis = texture2D(sampler1, uvOffset);\n  vec2 uv = uvOffset + 1.0 * u_distance * u_time * vec2(0.0, dis.r );\n  lowp vec4 tex = texture2D(texture, uv);\n  float widthLine = 0.03;\n  float v = clamp(99.0*(tex.r - ((1.0 - widthLine) + widthLine*u_cutTime)), 0.0, 1.0);\n  float alphaScale = clamp((1.0 - uvOffset.x) + 6.0*u_time - 2.5, 0.0, 1.0);\n  float edgeThreshold = 10.0;\n  float edgeAlpha = clamp(edgeThreshold * v_uv0.x, 0.0, 1.0) * clamp(edgeThreshold * (1.0 - v_uv0.x), 0.0, 1.0);\n  float hideColorTime = 1.0 - 5.0 * clamp((u_time - 0.8), 0.0, 1.0);\n  tex.a = alphaScale * clamp(v + hideColorTime * edgeAlpha * pow(tex.r, (8.0 * u_cutTime + 1.0) * (1.0 + 5.0 * (1.0 - u_distance))), 0.0, 1.0);\n  lowp vec4 color = texture2D(sampler2, v_uv0 + vec2(-0.95 * u_cutTime, 0.0));\n  color.b += v * 0.75 * (1.0 - color.b);\n  tex.rgb = (v + 1.0) * (color.rgb );\n  gl_FragColor = tex;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nuniform LightParams {\n  float u_time;\n  float u_cutTime;\n  float u_distance;\n  float u_offset;\n};\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos.y += u_distance * 10.0 * u_time;\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D sampler1;\nuniform sampler2D sampler2;\n#endif\nuniform LightParams {\n  float u_time;\n  float u_cutTime;\n  float u_distance;\n  float u_offset;\n};\nvoid main () {\n  vec2 uvOffset = vec2(v_uv0.x + u_offset, v_uv0.y);\n  lowp vec4 dis = texture2D(sampler1, uvOffset);\n  vec2 uv = uvOffset + 1.0 * u_distance * u_time * vec2(0.0, dis.r );\n  lowp vec4 tex = texture2D(texture, uv);\n  float widthLine = 0.03;\n  float v = clamp(99.0*(tex.r - ((1.0 - widthLine) + widthLine*u_cutTime)), 0.0, 1.0);\n  float alphaScale = clamp((1.0 - uvOffset.x) + 6.0*u_time - 2.5, 0.0, 1.0);\n  float edgeThreshold = 10.0;\n  float edgeAlpha = clamp(edgeThreshold * v_uv0.x, 0.0, 1.0) * clamp(edgeThreshold * (1.0 - v_uv0.x), 0.0, 1.0);\n  float hideColorTime = 1.0 - 5.0 * clamp((u_time - 0.8), 0.0, 1.0);\n  tex.a = alphaScale * clamp(v + hideColorTime * edgeAlpha * pow(tex.r, (8.0 * u_cutTime + 1.0) * (1.0 + 5.0 * (1.0 - u_distance))), 0.0, 1.0);\n  lowp vec4 color = texture2D(sampler2, v_uv0 + vec2(-0.95 * u_cutTime, 0.0));\n  color.b += v * 0.75 * (1.0 - color.b);\n  tex.rgb = (v + 1.0) * (color.rgb );\n  gl_FragColor = tex;\n}"
      }
    }
  ],
  "subMetas": {}
}