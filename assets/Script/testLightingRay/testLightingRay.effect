// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_time: { value: 0.0 }
        u_cutTime: { value: 0.0 }
        u_distance: { value: 0.0 }
        u_offset: { value: 0.0 }
        sampler1: { value: white }
        sampler2: { value: white }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  uniform LightParams {
    float u_time;
    float u_cutTime;
    float u_distance;
    float u_offset;
  };


  void main () {
    vec4 pos = vec4(a_position, 1);

    pos.y += u_distance * 10.0 * u_time;

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
//原始
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform sampler2D sampler1;
  uniform sampler2D sampler2;
  #endif

  uniform LightParams {
    float u_time;
    float u_cutTime;
    float u_distance;
    float u_offset;
  };

  void main () {
	  vec2 uvOffset = vec2(v_uv0.x + u_offset, v_uv0.y);
	  lowp vec4 dis = texture2D(sampler1, uvOffset);
  	vec2 uv = uvOffset + 0.18 * u_distance * u_time * vec2(0.0, dis.r );
	  lowp vec4 tex = texture2D(texture, uv);
	  float widthLine = 0.03;// - 0.01*clamp((1.0 - u_distance), 0.0, 1.0);
	  float v = clamp(99.0*(tex.r - ((1.0 - widthLine) + widthLine*u_cutTime)), 0.0, 1.0);
	  float alphaScale = clamp((1.0 - uvOffset.x) + 6.0*u_time - 2.5, 0.0, 1.0);
	  float edgeThreshold = 10.0;
	  float edgeAlpha = clamp(edgeThreshold * v_uv0.x, 0.0, 1.0) * clamp(edgeThreshold * (1.0 - v_uv0.x), 0.0, 1.0);
	  float hideColorTime = 1.0 - 5.0 * clamp((u_time - 0.8), 0.0, 1.0);
	  tex.a = alphaScale * clamp(v + hideColorTime * edgeAlpha * pow(tex.r, (8.0 * u_cutTime + 1.0) * (1.0 + 5.0 * (1.0 - u_distance))), 0.0, 1.0);
	  lowp vec4 color = texture2D(sampler2, v_uv0 + vec2(-0.95 * u_cutTime, 0.0));  // с движением цвета
	  color.b += v * 0.75 * (1.0 - color.b);
    tex.rgb = (v + 1.0) * (color.rgb );
    // gl_FragColor = color;
	  gl_FragColor = tex;

  }
}%
